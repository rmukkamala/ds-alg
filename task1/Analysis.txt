
##Document summarizing the Time complexities(runtime analysis) of the tasks.

NOTE: For time complexities of Python built-in functions, I referred to https://wiki.python.org/moin/TimeComplexity


Task 0:
- File read and List conversion will have O(n) (i.e they depend on length of input)
==> Amortized Worst Case Time Complexity would be O(n)

Task 1:
File Reads: O(n)
List Conversions: O(n)
For Iteration: O(n)
List Appends: O(1)
List to Set Conversion: O(n)
Length of a List: O(1)
- All the above operations were used in Task 2. However, all of them would be added and the result would't lead to a quadratic rate of increase.
==> So, Amortized Worst Case Time Complexity would still be O(n)

Task 2:
'for' iteration would be O(n)
Inside for loop, we use the 'in' operation for 2 if conditions. Every such operation would be O(n) (since it has to iterate through the entire list)
So here it would be  O(n*(n+n))=> O(2n^2) => O(n^2)
max() and dict.get inbuilt python functions take O(n) each.
However, all of the other time complexities would just be additions to the O(n^2).
==> Hence,Amortized Worst Case Time Complexity would be O(n^2)


Task 3:
We used sort function here which has O(n log n).
'for' and regex match each have O(n). So, in the for loop, it would be O(n^3)
O(n^3)+O(n log n)=> O(n^3)  ( O(n log n) will be ignored since it is smaller than O(n^3) )
We also get list slice here, which has O(k) (where k is the value of param or num of elements in the param).
However, none of the other TimeComplexities including O(k) have any impact on the O(n^3) since all others will be added.
==> So, Amortized Worst Case Time Complexity would still be O(n^3)


Task 4:
Here, as well we get O(n^3) in the final for loop.
2 nested 'in' operators and a 'for' loop contributes to this.
O(n log n) for the sorted function will be ignored since it is lesser than O(n^3).
==> So, Amortized Worst Case Time Complexity would be O(n^3)


